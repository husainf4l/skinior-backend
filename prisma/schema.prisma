// datasource and generator
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  SEEN
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String
  firstName   String
  lastName    String
  phoneNumber String?
  profile     Profile?
  role        Role      @default(CUSTOMER)
  orders      Order[]
  reviews     Review[]
  wishlist    Wishlist?
  cart        Cart?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Profile {
  id      Int     @id @default(autoincrement())
  userId  String  @unique
  address String?
  city    String?
  state   String?
  zipCode String?
  country String?
  user    User    @relation(fields: [userId], references: [id])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  products    Product[]
  images      String[]
}

model Product {
  id              Int         @id @default(autoincrement())
  handle          String?     @unique
  name            String
  description     String?     @db.Text
  price           Float       @default(0.00)
  barcode         String?     @unique
  brand           String?
  isFeatured      Boolean     @default(false)
  categoryId      Int
  category        Category    @relation(fields: [categoryId], references: [id])
  tags            Tag[]       @relation("ProductTags")
  images          Image[]     @relation("ProductImages")
  reviews         Review[]
  orderItems      OrderItem[]
  cartItems       CartItem[]
  wishlistItems   Wishlist[]  @relation("WishlistProducts")
  variants        Variant[]   @relation("ProductVariant")
  relatedProducts Product[]   @relation("RelatedProducts")
  relatedBy       Product[]   @relation("RelatedProducts")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Variant {
  id         Int         @id @default(autoincrement())
  name       String
  image      String
  products   Product[]   @relation("ProductVariant")
  orderItems OrderItem[]
  cartItems  CartItem[]
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  altText   String?
  productId Int?
  product   Product? @relation("ProductImages", fields: [productId], references: [id])
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[] @relation("ProductTags")
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int      @default(0)
  comment   String?
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Wishlist {
  id       Int       @id @default(autoincrement())
  userId   String    @unique
  user     User      @relation(fields: [userId], references: [id])
  products Product[] @relation("WishlistProducts")
}

model Order {
  id              String      @id @default(uuid())
  totalAmount     Float       @default(0.00)
  status          OrderStatus @default(PENDING)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User?       @relation(fields: [userId], references: [id])
  userId          String?
  orderItems      OrderItem[]
  shippingAddress String
  shippingCity    String
  shippingCountry String      @default("Jordan")
  phoneNumber     String
  notes           String?
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Float    @default(0.00)
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  variant   Variant? @relation(fields: [variantId], references: [id])
  variantId Int?
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
}

model Cart {
  id     Int        @id @default(autoincrement())
  userId String?    @unique
  user   User?      @relation(fields: [userId], references: [id])
  items  CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int      @default(1)
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  variant   Variant? @relation(fields: [variantId], references: [id])
  variantId Int?
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    Int
}

model Page {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  content     String
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
