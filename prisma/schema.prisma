// Datasource and Generator
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enums
enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatusenm {
  SEEN
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

// User and Profile Models
model User {
  id             String              @id @default(uuid())
  email          String              @unique
  password       String
  firstName      String
  lastName       String
  phoneNumber    String?
  profile        Profile?
  role           Role                @default(CUSTOMER)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  addresses      UserAddress[]
  paymentMethods UserPaymentMethod[]
  carts          ShoppingCart[]
  orders         Order[]
  reviews        UserReview[]
}

model Profile {
  id      Int     @id @default(autoincrement())
  userId  String  @unique
  address String?
  city    String?
  state   String?
  zipCode String?
  country String?
  user    User    @relation(fields: [userId], references: [id])
}

// Product Models
model Product {
  id              Int           @id @default(autoincrement())
  name            String
  descriptionAr   String?
  descriptionEn   String?
  image           String?
  handle          String?        @unique @default(uuid())
  isFeatured      Boolean       @default(false)
  categoryId      Int
  price           Float         @default(0)
  discountedPrice Float?
  category        Category      @relation(fields: [categoryId], references: [id])
  items           ProductItem[]
  variations      Variation[]
}

model ProductItem {
  id              Int     @id @default(autoincrement())
  productId       Int
  sku             String
  stock           Int
  image           String?
  price           Float
  discountedPrice Float?

  product        Product         @relation(fields: [productId], references: [id])
  configurations Configuration[]
  orderLines     OrderLine[]
  reviews        UserReview[] // Added relation back to UserReview

  CartItem CartItem[]
}

model Configuration {
  itemId   Int
  optionId Int

  item   ProductItem     @relation(fields: [itemId], references: [id])
  option VariationOption @relation(fields: [optionId], references: [id])

  @@id([itemId, optionId])
}

// Variation Models
model Variation {
  id        Int    @id @default(autoincrement())
  name      String
  productId Int

  product Product           @relation(fields: [productId], references: [id])
  options VariationOption[]
}

model VariationOption {
  id          Int    @id @default(autoincrement())
  variationId Int
  value       String

  variation      Variation       @relation(fields: [variationId], references: [id])
  configurations Configuration[]
}

// Category and Promotion Models
model Category {
  id       Int    @id @default(autoincrement())
  name     String
  parentId Int?

  parent        Category?           @relation("Parent", fields: [parentId], references: [id])
  subcategories Category[]          @relation("Parent")
  products      Product[]
  promotions    PromotionCategory[]
  handle        String
}

model Promotion {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  discount    Float
  startDate   DateTime
  endDate     DateTime?

  categories PromotionCategory[]
}

model PromotionCategory {
  categoryId  Int
  promotionId Int

  category  Category  @relation(fields: [categoryId], references: [id])
  promotion Promotion @relation(fields: [promotionId], references: [id])

  @@id([categoryId, promotionId])
}

// Order Models
model Order {
  id               Int            @id @default(autoincrement())
  userId           String?
  guestInfoId      Int?
  date             DateTime
  paymentMethodId  Int?
  shippingMethodId Int
  status           OrderStatusenm
  total            Float

  user           User?          @relation(fields: [userId], references: [id])
  guestInfo      GuestInfo?     @relation(fields: [guestInfoId], references: [id])
  shippingMethod ShippingMethod @relation(fields: [shippingMethodId], references: [id])
  lines          OrderLine[]
}

model OrderLine {
  id       Int   @id @default(autoincrement())
  itemId   Int
  orderId  Int
  quantity Int
  price    Float

  item  ProductItem @relation(fields: [itemId], references: [id])
  order Order       @relation(fields: [orderId], references: [id])
}

model ShippingMethod {
  id     Int     @id @default(autoincrement())
  name   String
  price  Float
  orders Order[]
}

model GuestInfo {
  id      Int     @id @default(autoincrement())
  name    String
  email   String
  phone   String?
  address String
  orders  Order[]
}

// Address Models
model UserAddress {
  id        Int     @id @default(autoincrement())
  userId    String
  addressId Int
  isDefault Boolean

  user    User    @relation(fields: [userId], references: [id])
  address Address @relation(fields: [addressId], references: [id])
}

model Address {
  id         Int     @id @default(autoincrement())
  line1      String
  line2      String?
  city       String
  region     String?
  postalCode String
  countryId  Int

  country       Country       @relation(fields: [countryId], references: [id])
  userAddresses UserAddress[]
}

model Country {
  id        Int       @id @default(autoincrement())
  name      String
  addresses Address[]
}

// Payment Models
model UserPaymentMethod {
  id            Int      @id @default(autoincrement())
  userId        String
  typeId        Int
  provider      String
  accountNumber String
  expiryDate    DateTime
  isDefault     Boolean

  user User        @relation(fields: [userId], references: [id])
  type PaymentType @relation(fields: [typeId], references: [id])
}

model PaymentType {
  id      Int                 @id @default(autoincrement())
  value   String
  methods UserPaymentMethod[]
}

// Shopping Cart Models
model ShoppingCart {
  id     Int        @id @default(autoincrement())
  userId String?
  items  CartItem[]

  user User? @relation(fields: [userId], references: [id])
}

model CartItem {
  id       Int @id @default(autoincrement())
  cartId   Int
  itemId   Int
  quantity Int

  cart ShoppingCart @relation(fields: [cartId], references: [id])
  item ProductItem  @relation(fields: [itemId], references: [id])
}

// Review Model
model UserReview {
  id      Int     @id @default(autoincrement())
  userId  String
  itemId  Int
  rating  Int
  comment String?

  user User        @relation(fields: [userId], references: [id])
  item ProductItem @relation(fields: [itemId], references: [id])
}
