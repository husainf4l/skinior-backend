// datasource and generator
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enums
enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

// USER MANAGEMENT
model User {
  id          String       @id @default(uuid())
  email       String    @unique
  password    String
  firstName   String
  lastName    String
  phoneNumber String?
  profile     Profile?
  role        Role      @default(CUSTOMER)
  orders      Order[]
  reviews     Review[]
  wishlist    Wishlist?
  cart        Cart?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// PROFILE MODEL
model Profile {
  id      Int     @id @default(autoincrement())
  userId  String     @unique
  address String?
  city    String?
  state   String?
  zipCode String?
  country String?
  user    User    @relation(fields: [userId], references: [id])
}

// CATEGORY MANAGEMENT
model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  products    Product[]
}

// PRODUCT MANAGEMENT
model Product {
  id              Int         @id @default(autoincrement())
  name            String
  description     String?
  price           Decimal     @default(0.00) @db.Decimal(10, 2)
  sku             String?     @unique
  slug            String      @unique
  brand           String?
  isFeatured      Boolean     @default(false)
  categoryId      Int
  category        Category    @relation(fields: [categoryId], references: [id])
  images          Image[]     @relation("ProductImages")
  reviews         Review[]
  orderItems      OrderItem[]
  cartItems       CartItem[] // Added opposite relation
  wishlistItems   Wishlist[]  @relation("WishlistProducts") // Added opposite relation
  variants        Variant[]
  relatedProducts Product[]   @relation("RelatedProducts")
  relatedBy       Product[]   @relation("RelatedProducts")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

// VARIANT MANAGEMENT
model Variant {
  id         Int         @id @default(autoincrement())
  productId  Int
  name       String
  price      Decimal     @default(0.00) @db.Decimal(10, 2)
  stock      Int         @default(0)
  sku        String?     @unique
  product    Product     @relation(fields: [productId], references: [id])
  attributes Attribute[]
  images     Image[]     @relation("VariantImages")
  orderItems OrderItem[] // Added opposite relation
  cartItems  CartItem[] // Added opposite relation
}

// ATTRIBUTE MODEL FOR VARIANTS
model Attribute {
  id        Int     @id @default(autoincrement())
  key       String
  value     String
  variantId Int
  variant   Variant @relation(fields: [variantId], references: [id])
}

// IMAGES FOR PRODUCTS AND VARIANTS
model Image {
  id        Int      @id @default(autoincrement())
  url       String
  altText   String?
  productId Int?
  product   Product? @relation("ProductImages", fields: [productId], references: [id])
  variantId Int?
  variant   Variant? @relation("VariantImages", fields: [variantId], references: [id])
}

// REVIEW AND RATING MANAGEMENT
model Review {
  id        Int      @id @default(autoincrement())
  rating    Int      @default(0)
  comment   String?
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

// WISHLIST MANAGEMENT
model Wishlist {
  id       Int       @id @default(autoincrement())
  userId   String       @unique
  user     User      @relation(fields: [userId], references: [id])
  products Product[] @relation("WishlistProducts")
}

// ORDER MANAGEMENT
model Order {
  id              Int         @id @default(autoincrement())
  totalAmount     Decimal     @default(0.00) @db.Decimal(10, 2)
  status          OrderStatus @default(PENDING)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  orderItems      OrderItem[]
  shippingAddress String
  shippingCity    String
  shippingState   String
  shippingZipCode String
  shippingCountry String
  phoneNumber     String
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Decimal  @default(0.00) @db.Decimal(10, 2)
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  variant   Variant? @relation(fields: [variantId], references: [id])
  variantId Int?
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
}

// SHOPPING CART MANAGEMENT
model Cart {
  id     Int        @id @default(autoincrement())
  userId String        @unique
  user   User       @relation(fields: [userId], references: [id])
  items  CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int      @default(1)
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  variant   Variant? @relation(fields: [variantId], references: [id])
  variantId Int?
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    Int
}

// CONTENT MANAGEMENT (CMS)
model Page {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  content     String
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
