// Datasource and Generator
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enums
enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatusenm {
  PENDING
  COMPLETED
  CANCELLED
}

// User and Profile Models
model User {
  id             String              @id @default(uuid())
  email          String              @unique
  password       String
  firstName      String
  lastName       String
  phoneNumber    String?
  profile        Profile?
  role           Role                @default(CUSTOMER)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  addresses      UserAddress[]
  paymentMethods UserPaymentMethod[]
  orders         Order[]
  reviews        UserReview[]
}

model Profile {
  id      Int     @id @default(autoincrement())
  userId  String  @unique
  address String?
  city    String?
  state   String?
  zipCode String?
  country String?
  user    User    @relation(fields: [userId], references: [id])
}

// Product Models
model Product {
  id              Int         @id @default(autoincrement())
  name            String
  descriptionAr   String?
  descriptionEn   String?
  image           String?
  handle          String?     @unique @default(uuid())
  isFeatured      Boolean     @default(false)
  categoryHandle  String      @default("hair-care")
  price           Float       @default(0)
  discountedPrice Float?
  category        Category    @relation(fields: [categoryHandle], references: [handle])
  variants        Variant[]
  stock           Int         @default(10)
  brand           String?
  metaDescription String?
  metaTitle       String?
  metaKeywords    String?
  CartItem        CartItem[]
  OrderItem       OrderItem[]
}

model Variant {
  id         Int          @id @default(autoincrement())
  productId  Int
  name       String
  sku        String
  image      String?
  product    Product      @relation(fields: [productId], references: [id])
  CartItem   CartItem[]
  UserReview UserReview[]

  OrderItem OrderItem[]
}

// Category and Promotion Models
model Category {
  id       Int    @id @default(autoincrement())
  name     String
  parentId Int?

  parent        Category?           @relation("Parent", fields: [parentId], references: [id])
  subcategories Category[]          @relation("Parent")
  products      Product[]
  promotions    PromotionCategory[]
  handle        String              @unique
}

model Promotion {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  discount    Float
  startDate   DateTime
  endDate     DateTime?

  categories PromotionCategory[]
}

model PromotionCategory {
  categoryHandle String
  promotionId    Int

  category  Category  @relation(fields: [categoryHandle], references: [handle])
  promotion Promotion @relation(fields: [promotionId], references: [id])

  @@id([categoryHandle, promotionId])
}

// Order Models

model ShippingMethod {
  id     Int     @id @default(autoincrement())
  name   String
  price  Float
  orders Order[]
}

model GuestInfo {
  id      Int     @id @default(autoincrement())
  name    String
  email   String
  phone   String?
  address String
  orders  Order[]
}

// Address Models
model UserAddress {
  id        Int     @id @default(autoincrement())
  userId    String
  addressId Int
  isDefault Boolean

  user    User    @relation(fields: [userId], references: [id])
  address Address @relation(fields: [addressId], references: [id])
}

model Address {
  id            Int            @id @default(autoincrement())
  line1         String
  line2         String?
  city          String
  phoneNumber   String
  country       String
  userAddresses UserAddress[]
  ShoppingCart  ShoppingCart[]
  Order         Order[]
}

model UserPaymentMethod {
  id            Int      @id @default(autoincrement())
  userId        String
  typeId        Int
  provider      String
  accountNumber String
  expiryDate    DateTime
  isDefault     Boolean

  user User        @relation(fields: [userId], references: [id])
  type PaymentType @relation(fields: [typeId], references: [id])
}

model PaymentType {
  id      Int                 @id @default(autoincrement())
  value   String
  methods UserPaymentMethod[]
}

model UserReview {
  id        Int     @id @default(autoincrement())
  userId    String
  variantId Int // Reference to the variant being reviewed
  rating    Int
  comment   String?
  user      User    @relation(fields: [userId], references: [id])
  variant   Variant @relation(fields: [variantId], references: [id])
}

model ShoppingCart {
  id            Int        @id @default(autoincrement())
  userId        String?
  sessionsId    String     @unique
  items         CartItem[]
  addressId     Int?
  address       Address?   @relation(fields: [addressId], references: [id])
  total         Float      @default(0.0)
  totalQuantity Int        @default(0)
}

model Order {
  id               Int            @id @default(autoincrement())
  userId           String?
  guestInfoId      Int?
  addressId        Int?
  paymentMethodId  Int?
  shippingMethodId Int // This field must be defined here
  status           OrderStatusenm
  total            Float
  date             DateTime       @default(now())
  user             User?          @relation(fields: [userId], references: [id])
  guestInfo        GuestInfo?     @relation(fields: [guestInfoId], references: [id])
  address          Address?       @relation(fields: [addressId], references: [id])
  shippingMethod   ShippingMethod @relation(fields: [shippingMethodId], references: [id])
  orderItems       OrderItem[]
}

model OrderItem {
  id        Int   @id @default(autoincrement())
  orderId   Int
  productId Int
  variantId Int?
  quantity  Int
  price     Float @default(0.0)
  total     Float @default(0.0)

  order   Order    @relation(fields: [orderId], references: [id])
  product Product  @relation(fields: [productId], references: [id])
  variant Variant? @relation(fields: [variantId], references: [id])
}

model CartItem {
  id             Int           @id @default(autoincrement())
  shoppingCartId Int?
  productId      Int
  variantId      Int?
  quantity       Int
  price          Float         @default(0.0)
  total          Float         @default(0.0)
  shoppingCart   ShoppingCart? @relation(fields: [shoppingCartId], references: [id])
  product        Product       @relation(fields: [productId], references: [id])
  variant        Variant?      @relation(fields: [variantId], references: [id])
  orderId        Int?
}

model Banner {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  link        String
  image1 String?
  image2 String?
  hexcode String?
}
