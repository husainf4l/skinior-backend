datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int       @id @default(autoincrement())
  phoneNumber String    @unique
  email       String?   @unique
  password    String
  firstName   String?
  lastName    String?
  addresses   Address[]
  orders      Order[]
  reviews     Review[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Address {
  id      Int     @id @default(autoincrement())
  street  String
  city    String
  state   String
  zipCode String
  country String
  user    User?   @relation(fields: [userId], references: [id])
  userId  Int?
  orders  Order[]
}

model Product {
  id                Int         @id @default(autoincrement())
  name              String
  description       String?
  price             Decimal     @default(0.00) @db.Decimal(10, 2)
  stock             Int         @default(0)
  sku               String?     @unique
  slug              String      @unique
  brand             String?
  isFeatured        Boolean     @default(false)
  isTopLine         Boolean     @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  images            Image[] // Non-optional list
  categories        Category[]  @relation("ProductCategories") // Non-optional list
  reviews           Review[] // Non-optional list (empty if no reviews)
  orderItems        OrderItem[] // Non-optional list
  variants          Variant[] // Non-optional list (empty if no variants)
  relatedProducts   Product[]   @relation("RelatedProducts") // Non-optional list
  relatedByProducts Product[]   @relation("RelatedProducts") // Non-optional list
}

model Variant {
  id         Int         @id @default(autoincrement())
  product    Product     @relation(fields: [productId], references: [id])
  productId  Int
  name       String
  price      Decimal     @default(0.00) @db.Decimal(10, 2)
  stock      Int         @default(0)
  sku        String?     @unique
  images     Image[]
  attributes Attribute[]
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  altText   String?
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?
  variant   Variant? @relation(fields: [variantId], references: [id])
  variantId Int?
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[] @relation("ProductCategories")
}

model Attribute {
  id        Int     @id @default(autoincrement())
  key       String
  value     String
  variant   Variant @relation(fields: [variantId], references: [id])
  variantId Int
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
}

model Order {
  id                Int         @id @default(autoincrement())
  totalAmount       Decimal     @default(0.00) @db.Decimal(10, 2)
  status            OrderStatus @default(PENDING)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  user              User?       @relation(fields: [userId], references: [id])
  userId            Int?
  orderItems        OrderItem[]
  shippingAddress   Address     @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId Int
  phoneNumber       String
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  price     Decimal @default(0.00) @db.Decimal(10, 2)
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
